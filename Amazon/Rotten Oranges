class Pair{
    int row,col;
    public Pair(int row,int col){
          this.row=row;
          this.col=col;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        Queue<Pair> q=new LinkedList<>();
        int freshCount=0;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
              if(grid[i][j]==2){
                q.add(new Pair(i,j));
              }else if(grid[i][j]==1){
                freshCount++;
              }
            }
        }
 if(freshCount==0)return 0;
 int minutes=0;
 int dRow[]={+1,-1,0,0};
 int dCol[]={0,0,+1,-1};
 while(!q.isEmpty()){
    int size=q.size();
    boolean anyRotten=false;
    for(int i=0;i<size;i++){
        Pair curr=q.poll();

    
    for(int j=0;j<4;j++){
        int nRow=curr.row+dRow[j];
        int nCol=curr.col+dCol[j];
    
    if(nRow >= 0 && nCol >= 0 && nRow < n && nCol < m && grid[nRow][nCol] == 1){
        grid[nRow][nCol]=2;
         q.add(new Pair(nRow, nCol));
        anyRotten=true;
        freshCount--;
    }
    }
    }
    if(anyRotten)minutes++;
 }
 return freshCount == 0 ? minutes : -1;
    }
}
