class KthLargest {
    //4 approaches 
    //min heap TC(logk) sc O(k) heap size
    //max heap Tc O((n+k)â‹…logn) and sc O(n) not efficient for large input size
    //quick select tc O(n) average case and sc O(n)
    //sorting tc(nlogn) and sc o(n) least efficient
  PriorityQueue<Integer> pq;
  int k;
    public KthLargest(int k, int[] nums) {
     pq=new PriorityQueue<>();
        this.k=k;
        for(int i=0;i<nums.length;i++){
            pq.add(nums[i]);

        }
        
        
    }
    
    public int add(int val) {
        pq.add(val);
        while(pq.size()>k){
            pq.poll();
        }

         return pq.peek();
        
    }
    
    }


/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest obj = new KthLargest(k, nums);
 * int param_1 = obj.add(val);
 */
