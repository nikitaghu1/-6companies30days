class Solution {
    //4 approaches

    public void wiggleSort(int[] nums) {
        //greedy tc O(n) and sc constant best for small and medium arrays,not able to handle number of duplicates
       
       
             /*if ((i % 2 == 0 && nums[i] > nums[i + 1]) || (i % 2 == 1 && nums[i] < nums[i + 1])) {
                swap(nums,i,i+1);
            }
            
            

            
           
        }
    
        private void swap(int nums[],int i,int j){
            int temp=nums[i];
                   nums[i]=nums[j];
                   nums[j]=temp;
        }*/
       
        //approach 2 sorting+odd even index filling tc (nlogn) sc is O(n) handles duplicates more properly
    int n=nums.length-1;
        //copy values to new array
       int[] newarr=Arrays.copyOf(nums,nums.length);
        //sort new array
       Arrays.sort(newarr);
        for(int i=1;i<nums.length;i+=2)
            nums[i]=newarr[n--];
        //even position
        for(int i=0;i<nums.length;i+=2)
            nums[i]=newarr[n--];
    
            //3rd approachh tc is (nlogn) and sc O(n)
          /* PriorityQueue<Integer> pq1 = new PriorityQueue<>((a,b)->Integer.compare(b,a));
        Arrays.sort(nums);
        int n = nums.length;
        for(int i=0;i<n;i++){
            pq1.add(nums[i]);
        }
        for(int i=1; i<n; i += 2){
            nums[i] = pq1.peek();
            pq1.poll();
        }
        for(int i=0; i<n; i += 2){
            nums[i] = pq1.peek();
            pq1.poll();
        }


        //approach 4 sorting+2 pointer tc (nlogn) sc is O(n) handles duplicates more properly
         int n = nums.length;
        int[] sorted = Arrays.copyOf(nums, n);
        Arrays.sort(sorted); // Sort the array

        int large = (n - 1);     // Pointer for the largest elements (right half)
        int small = (n - 1) / 2; // Pointer for the smallest elements (left half)

        // Fill the original array in a wiggle pattern
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                nums[i] = sorted[small--]; // Take from the left half
            } else {
                nums[i] = sorted[large--]; // Take from the right half
            }
        }*/

}
}
