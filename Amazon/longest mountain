class Solution {
    public int longestMountain(int[] arr) {
  //TC O(n^2) and sc constant brute force
        /*if(arr.length<3)return 0;
        int maxLength = 0;
      for(int i=1;i<arr.length-1;){
        if(arr[i-1]<arr[i] && arr[i]>arr[i+1]){
           int left=i-1;
           int right=i+1;
            while(left>0 && arr[left-1]<arr[left]){
                left--;
            }
             while(right<arr.length-1 && arr[right]>arr[right+1]){
               right++;
            }
            maxLength=Math.max(maxLength,right-left+1);
            i=right;

        }else{
            i++;
        }
      }
      return maxLength;
       }*/
       //TC O(n) and sc constant flag based approach

if(arr.length<3)return 0;
        int maxLength = 0;
        int up=0;
        int down=0;
        for(int i=1;i<arr.length;i++){
            if(down>0 && arr[i-1]<arr[i] || arr[i-1]==arr[i]){
                up=0;
                down=0;
            }
            if(arr[i-1]<arr[i])up++;
            if(arr[i-1]>arr[i])down++;
     if(up>0 && down>0 ){
        maxLength=Math.max(maxLength,up+down+1);
     }

        }
 return maxLength;
       }
         //TC O(n) and sc constant sliding window
        
}
